version: '3.8'

services:
  travel-message-generator:
    build: .
    container_name: travel-message-app
    ports:
      - "8501:8501"
    volumes:
      # 데이터 영속성을 위한 볼륨 마운트
      - ./data:/app/data
      - ./logs:/app/logs
      - ./configs:/app/configs
      - ./templates:/app/templates
      # 업로드된 파일 임시 저장소
      - ./uploads:/app/uploads
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_FILE_WATCHER_TYPE=none
      # 한국 시간대 설정
      - TZ=Asia/Seoul
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # 리소스 제한
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # 선택사항: Redis 캐시 서버 (성능 향상을 위해)
  redis:
    image: redis:7-alpine
    container_name: travel-message-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # 선택사항: 로그 수집을 위한 Elasticsearch (대용량 서비스용)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
  #   container_name: travel-message-elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - xpack.security.enabled=false
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   restart: unless-stopped

  # 선택사항: 모니터링을 위한 Prometheus (운영 환경용)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: travel-message-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #   restart: unless-stopped

  # 선택사항: 메트릭 시각화를 위한 Grafana
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: travel-message-grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin123
  #   restart: unless-stopped

volumes:
  redis_data:
    driver: local
  # elasticsearch_data:
  #   driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

networks:
  default:
    name: travel-message-network